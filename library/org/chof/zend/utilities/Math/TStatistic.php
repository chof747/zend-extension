<?php
class Chof_Util_Math_TStatistic 
{
  public static function extractAllOutlier(array $sample, $confidence = 0.05, $both = true)
  //****************************************************************************
  {
    asort($sample);
    list($sample, $outfirst) = 
      self::checkAllOutliersBySort($sample, $confidence);
    if ($both)
    {
      arsort($sample);
      list($sample, $outsecond) =
        self::checkAllOutliersBySort($sample, $confidence);
      
      return array($sample, $outfirst + $outsecond);
    }
    else
    {
      return array($sample, $outfirst);
    }
  }
  
  public static function extractFirstOutlier(array $sample, $smallest = true, 
    $confidence = 0.05)
  //****************************************************************************
  {
    if ($smallest)
    {
      arsort($sample);
    }
    else
    {
      asort($sample);
    }
    
    return self::checkOutlier($sample, $confidence);
  }
  
  
  private static function checkAllOutliersBySort(array $sample, $confidence)
  //****************************************************************************
  {
    $outliers = array();
    do
    {
      list($sample, $out)  = self::checkOutlier($sample, $confidence);
      $outliers = $outliers + $out;
    
    } while(!empty($out));
    
    return array($sample, $outliers);
  }
  
  private static function checkOutlier(array $sample, $confidence)
  //****************************************************************************
  {
    $keys = array_keys($sample);
    $outlier = array();
    
    $avg = Chof_Util_Math::average($sample);
    $sigma = Chof_Util_Math::standardDev($sample);
    $n = count($sample);
    
    if ($n>2)
    {
      $key = array_pop($keys);
      $probe = array_pop($sample);
      
      $outlier = array();
      
      if ($sigma != 0)
      {
        $G = abs($probe - $avg) / $sigma;
        if ($G > self::gcrit($n, $confidence))
        {
          $outlier[$key] = $probe;
        }
        else
        {
          $sample[$key] =  $probe;
        }
      }
      else
      {
        $outlier[$key] = $probe;
      }
    }
    
    return array($sample, $outlier);
  }
  
  public static function extractSmallestOutlier(array $sample, $confidence = 0.05)
  {
    
  }
  
  public static function ttestEqual(array $sample, $exp, $confidence)
  //****************************************************************************
  {
    return abs(self::tValue($exp, $sample)) < 
           self::t((1-$confidence), count($sample) -1);
  }
  
  public static function ttestLarger(array $sample, $exp, $confidence)
  //****************************************************************************
  {
    return self::tValue($exp, $sample) > 
           self::t((1-$confidence), count($sample) -1, true);
  }
  
  public static function ttestSmaller(array $sample, $exp, $confidence)
  //****************************************************************************
  {
    return self::tValue($exp, $sample) < 
           -1 * self::t((1-$confidence), count($sample) -1, true);
  }
  
  public static function tValue($reference, array $sample)
  #*****************************************************************************
  {
    $n = count($sample)*1.0;
    $avg = Chof_Util_Math::average($sample);
    $sigma = Chof_Util_Math::standardDev($sample, true);
    
    $sigma = ($sigma == 0) ? 1e-6 : $sigma;
    
    $t = sqrt($n) * ($avg - $reference) / $sigma;
  
    return $t;
  }
  
  public static function gcrit($df, $confidence = 0.05, $oneside = false)
  //****************************************************************************
  {
    if ($oneside)
    {
      $confidence = 1 - (1 - $confidence) * 2; 
    }
    
    $confidence = intval($confidence * 1000);
    
    $cix = self::arrayIntervalSearch($confidence, 
        self::$G_CONFIDENCE_POINTS);
    $dix = self::arrayIntervalSearch($df, self::$T_DF_POINTS);
    
    if ((is_numeric($cix)) && (is_numeric($dix)))
    {
      return self::$G_GCRIT[$dix][$cix];
    }
    else if ((is_numeric($cix)) && (is_array($dix)))
    {
      return self::interpolDf($df, $dix, 
          self::$G_GCRIT[$dix[0]][$cix], 
          self::$G_GCRIT[$dix[1]][$cix]);
    }
    else if ((is_array($cix)) && (is_numeric($dix)))
    {
      return self::interpolG($confidence, $dix, $cix);
    }
    else
    {
      return self::interpolDf($df, $dix, 
          self::interpolG($confidence, $dix[0], $cix),
          self::interpolG($confidence, $dix[1], $cix));
    }
  }
  
  public static function t($probability, $df, $oneside = false)
  //****************************************************************************
  {
    if ($oneside)
    {
      $probability = 1 - (1 - $probability) * 2; 
    }
    
    $probability = intval($probability * 1000);
    
    $pix = self::arrayIntervalSearch($probability, 
        self::$T_PROBABILTY_POINTS);
    $dix = self::arrayIntervalSearch($df, self::$T_DF_POINTS);
    
    if ((is_numeric($pix)) && (is_numeric($dix)))
    {
      return self::$T_DISTRIBUTION[$dix][$pix];
    }
    else if ((is_numeric($pix)) && (is_array($dix)))
    {
      return self::interpolDf($df, $dix, 
          self::$T_DISTRIBUTION[$dix[0]][$pix], 
          self::$T_DISTRIBUTION[$dix[1]][$pix]);
    }
    else if ((is_array($pix)) && (is_numeric($dix)))
    {
      return self::interpolP($probability, $dix, $pix);
    }
    else
    {
      return self::interpolDf($df, $dix, 
          self::interpolP($probability, $dix[0], $pix),
          self::interpolP($probability, $dix[1], $pix));
    }
  }
  
  private static function arrayIntervalSearch($ix, array $a)
  //****************************************************************************
  {
    if (array_search($ix, $a))
    {
      return $ix;
    }
    else 
    {
      for($i=0;$i<count($a);$i++)
      {
        if ($a[$i] > $ix)
        {
          if ($i > 0)
          {
            return array(
                $a[$i-1], 
                $a[$i]
            );
          }
          else 
          {
            throw new Zend_Exception(
                "$ix is lower than the supported range of the array.");
          }
        }
      }
      
      throw new Zend_Exception(
          "$ix is above the supported range for the array");
    }    
  }
 
  private static function interpolDf($df, $dix, $t0, $t1)
  //****************************************************************************
  {
    return Chof_Util_Math::linInterpolation($df, 
      $dix[0], $dix[1],
      $t0, $t1);
  }
  
  private static function interpolP($probability, $df, $pix)
  //****************************************************************************
  {
    if ($probability >= 950)
    {
      return Chof_Util_Math::logInterpolation($probability,
        $pix[0], $pix[1],
        self::$T_DISTRIBUTION[$df][$pix[0]], self::$T_DISTRIBUTION[$df][$pix[1]]);
    }
    else 
    {
      return Chof_Util_Math::linInterpolation($probability,
        $pix[0], $pix[1],
        self::$T_DISTRIBUTION[$df][$pix[0]], self::$T_DISTRIBUTION[$df][$pix[1]]);
    }
  }
    
  private static function interpolG($confidence, $df, $cix)
  //****************************************************************************
  {
    if ($confidence >= 50)
    {
      return Chof_Util_Math::logInterpolation($confidence,
        $cix[0], $cix[1],
        self::$G_GCRIT[$df][$cix[0]], self::$G_GCRIT[$df][$cix[1]]);
    }
    else 
    {
      return Chof_Util_Math::linInterpolation($confidence,
        $cix[0], $cix[1],
        self::$G_GCRIT[$df][$cix[0]], self::$G_GCRIT[$df][$cix[1]]);
    }
  }
    
  private static $T_PROBABILTY_POINTS = array(
    500, 750, 800, 900, 950, 980, 990, 998  
  );
  
  private static $T_DF_POINTS = array(
        1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,
       16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30, 
       40,  50,  60,  70,  80,  90, 100, 200, 300, 400, 500, PHP_INT_MAX
  ); 
  
  private static $T_DISTRIBUTION = array(
    1 => array(  500 => 1.000, 750 => 2.414, 800 => 3.078, 900 => 6.314, 950 => 12.706, 980 => 31.821, 990 => 63.657, 998 => 318.309, ),
    2 => array(  500 => 0.816, 750 => 1.604, 800 => 1.886, 900 => 2.920, 950 => 4.303, 980 => 6.965, 990 => 9.925, 998 => 22.327, ),
    3 => array(  500 => 0.765, 750 => 1.423, 800 => 1.638, 900 => 2.353, 950 => 3.182, 980 => 4.541, 990 => 5.841, 998 => 10.215, ),
    4 => array(  500 => 0.741, 750 => 1.344, 800 => 1.533, 900 => 2.132, 950 => 2.776, 980 => 3.747, 990 => 4.604, 998 => 7.173, ),
    5 => array(  500 => 0.727, 750 => 1.301, 800 => 1.476, 900 => 2.015, 950 => 2.571, 980 => 3.365, 990 => 4.032, 998 => 5.893, ),
    6 => array(  500 => 0.718, 750 => 1.273, 800 => 1.440, 900 => 1.943, 950 => 2.447, 980 => 3.143, 990 => 3.707, 998 => 5.208, ),
    7 => array(  500 => 0.711, 750 => 1.254, 800 => 1.415, 900 => 1.895, 950 => 2.365, 980 => 2.998, 990 => 3.499, 998 => 4.785, ),
    8 => array(  500 => 0.706, 750 => 1.240, 800 => 1.397, 900 => 1.860, 950 => 2.306, 980 => 2.896, 990 => 3.355, 998 => 4.501, ),
    9 => array(  500 => 0.703, 750 => 1.230, 800 => 1.383, 900 => 1.833, 950 => 2.262, 980 => 2.821, 990 => 3.250, 998 => 4.297, ),
    10 => array(  500 => 0.700, 750 => 1.221, 800 => 1.372, 900 => 1.812, 950 => 2.228, 980 => 2.764, 990 => 3.169, 998 => 4.144, ),
    11 => array(  500 => 0.697, 750 => 1.214, 800 => 1.363, 900 => 1.796, 950 => 2.201, 980 => 2.718, 990 => 3.106, 998 => 4.025, ),
    12 => array(  500 => 0.695, 750 => 1.209, 800 => 1.356, 900 => 1.782, 950 => 2.179, 980 => 2.681, 990 => 3.055, 998 => 3.930, ),
    13 => array(  500 => 0.694, 750 => 1.204, 800 => 1.350, 900 => 1.771, 950 => 2.160, 980 => 2.650, 990 => 3.012, 998 => 3.852, ),
    14 => array(  500 => 0.692, 750 => 1.200, 800 => 1.345, 900 => 1.761, 950 => 2.145, 980 => 2.624, 990 => 2.977, 998 => 3.787, ),
    15 => array(  500 => 0.691, 750 => 1.197, 800 => 1.341, 900 => 1.753, 950 => 2.131, 980 => 2.602, 990 => 2.947, 998 => 3.733, ),
    16 => array(  500 => 0.690, 750 => 1.194, 800 => 1.337, 900 => 1.746, 950 => 2.120, 980 => 2.583, 990 => 2.921, 998 => 3.686, ),
    17 => array(  500 => 0.689, 750 => 1.191, 800 => 1.333, 900 => 1.740, 950 => 2.110, 980 => 2.567, 990 => 2.898, 998 => 3.646, ),
    18 => array(  500 => 0.688, 750 => 1.189, 800 => 1.330, 900 => 1.734, 950 => 2.101, 980 => 2.552, 990 => 2.878, 998 => 3.610, ),
    19 => array(  500 => 0.688, 750 => 1.187, 800 => 1.328, 900 => 1.729, 950 => 2.093, 980 => 2.539, 990 => 2.861, 998 => 3.579, ),
    20 => array(  500 => 0.687, 750 => 1.185, 800 => 1.325, 900 => 1.725, 950 => 2.086, 980 => 2.528, 990 => 2.845, 998 => 3.552, ),
    21 => array(  500 => 0.686, 750 => 1.183, 800 => 1.323, 900 => 1.721, 950 => 2.080, 980 => 2.518, 990 => 2.831, 998 => 3.527, ),
    22 => array(  500 => 0.686, 750 => 1.182, 800 => 1.321, 900 => 1.717, 950 => 2.074, 980 => 2.508, 990 => 2.819, 998 => 3.505, ),
    23 => array(  500 => 0.685, 750 => 1.180, 800 => 1.319, 900 => 1.714, 950 => 2.069, 980 => 2.500, 990 => 2.807, 998 => 3.485, ),
    24 => array(  500 => 0.685, 750 => 1.179, 800 => 1.318, 900 => 1.711, 950 => 2.064, 980 => 2.492, 990 => 2.797, 998 => 3.467, ),
    25 => array(  500 => 0.684, 750 => 1.178, 800 => 1.316, 900 => 1.708, 950 => 2.060, 980 => 2.485, 990 => 2.787, 998 => 3.450, ),
    26 => array(  500 => 0.684, 750 => 1.177, 800 => 1.315, 900 => 1.706, 950 => 2.056, 980 => 2.479, 990 => 2.779, 998 => 3.435, ),
    27 => array(  500 => 0.684, 750 => 1.176, 800 => 1.314, 900 => 1.703, 950 => 2.052, 980 => 2.473, 990 => 2.771, 998 => 3.421, ),
    28 => array(  500 => 0.683, 750 => 1.175, 800 => 1.313, 900 => 1.701, 950 => 2.048, 980 => 2.467, 990 => 2.763, 998 => 3.408, ),
    29 => array(  500 => 0.683, 750 => 1.174, 800 => 1.311, 900 => 1.699, 950 => 2.045, 980 => 2.462, 990 => 2.756, 998 => 3.396, ),
    30 => array(  500 => 0.683, 750 => 1.173, 800 => 1.310, 900 => 1.697, 950 => 2.042, 980 => 2.457, 990 => 2.750, 998 => 3.385, ),
    40 => array(  500 => 0.681, 750 => 1.167, 800 => 1.303, 900 => 1.684, 950 => 2.021, 980 => 2.423, 990 => 2.704, 998 => 3.307, ),
    50 => array(  500 => 0.679, 750 => 1.164, 800 => 1.299, 900 => 1.676, 950 => 2.009, 980 => 2.403, 990 => 2.678, 998 => 3.261, ),
    60 => array(  500 => 0.679, 750 => 1.162, 800 => 1.296, 900 => 1.671, 950 => 2.000, 980 => 2.390, 990 => 2.660, 998 => 3.232, ),
    70 => array(  500 => 0.678, 750 => 1.160, 800 => 1.294, 900 => 1.667, 950 => 1.994, 980 => 2.381, 990 => 2.648, 998 => 3.211, ),
    80 => array(  500 => 0.678, 750 => 1.159, 800 => 1.292, 900 => 1.664, 950 => 1.990, 980 => 2.374, 990 => 2.639, 998 => 3.195, ),
    90 => array(  500 => 0.677, 750 => 1.158, 800 => 1.291, 900 => 1.662, 950 => 1.987, 980 => 2.368, 990 => 2.632, 998 => 3.183, ),
    100 => array(  500 => 0.677, 750 => 1.157, 800 => 1.290, 900 => 1.660, 950 => 1.984, 980 => 2.364, 990 => 2.626, 998 => 3.174, ),
    200 => array(  500 => 0.676, 750 => 1.154, 800 => 1.286, 900 => 1.653, 950 => 1.972, 980 => 2.345, 990 => 2.601, 998 => 3.131, ),
    300 => array(  500 => 0.675, 750 => 1.153, 800 => 1.284, 900 => 1.650, 950 => 1.968, 980 => 2.339, 990 => 2.592, 998 => 3.118, ),
    400 => array(  500 => 0.675, 750 => 1.152, 800 => 1.284, 900 => 1.649, 950 => 1.966, 980 => 2.336, 990 => 2.588, 998 => 3.111, ),
    500 => array(  500 => 0.675, 750 => 1.152, 800 => 1.283, 900 => 1.648, 950 => 1.965, 980 => 2.334, 990 => 2.586, 998 => 3.107, ),
    PHP_INT_MAX => array(  500 => 0.674, 750 => 1.150, 800 => 1.282, 900 => 1.645, 950 => 1.960, 980 => 2.326, 990 => 2.576, 998 => 3.090, )
  );
  
  private static $G_CONFIDENCE_POINTS = array(
      10, 50, 100, 150, 200
  );
  
  private static $G_GCRIT = array(
 3 => array(10 => 1.155, 50 => 1.154, 100 => 1.153, 150 => 1.151, 200 => 1.148),
4 => array(10 => 1.496, 50 => 1.481, 100 => 1.463, 150 => 1.444, 200 => 1.425),
5 => array(10 => 1.764, 50 => 1.715, 100 => 1.671, 150 => 1.635, 200 => 1.602),
6 => array(10 => 1.973, 50 => 1.887, 100 => 1.822, 150 => 1.772, 200 => 1.729),
7 => array(10 => 2.139, 50 => 2.020, 100 => 1.938, 150 => 1.878, 200 => 1.828),
8 => array(10 => 2.274, 50 => 2.127, 100 => 2.032, 150 => 1.964, 200 => 1.909),
9 => array(10 => 2.387, 50 => 2.215, 100 => 2.110, 150 => 2.036, 200 => 1.977),
10 => array(10 => 2.482, 50 => 2.290, 100 => 2.176, 150 => 2.098, 200 => 2.036),
11 => array(10 => 2.564, 50 => 2.355, 100 => 2.234, 150 => 2.152, 200 => 2.088),
12 => array(10 => 2.636, 50 => 2.412, 100 => 2.285, 150 => 2.200, 200 => 2.134),
13 => array(10 => 2.699, 50 => 2.462, 100 => 2.331, 150 => 2.243, 200 => 2.176),
14 => array(10 => 2.755, 50 => 2.507, 100 => 2.372, 150 => 2.282, 200 => 2.213),
15 => array(10 => 2.806, 50 => 2.548, 100 => 2.409, 150 => 2.318, 200 => 2.248),
16 => array(10 => 2.852, 50 => 2.586, 100 => 2.443, 150 => 2.350, 200 => 2.279),
17 => array(10 => 2.894, 50 => 2.620, 100 => 2.475, 150 => 2.380, 200 => 2.309),
18 => array(10 => 2.932, 50 => 2.652, 100 => 2.504, 150 => 2.408, 200 => 2.336),
19 => array(10 => 2.968, 50 => 2.681, 100 => 2.531, 150 => 2.435, 200 => 2.361),
20 => array(10 => 3.001, 50 => 2.708, 100 => 2.557, 150 => 2.459, 200 => 2.385),
21 => array(10 => 3.031, 50 => 2.734, 100 => 2.580, 150 => 2.482, 200 => 2.408),
22 => array(10 => 3.060, 50 => 2.758, 100 => 2.603, 150 => 2.504, 200 => 2.429),
23 => array(10 => 3.087, 50 => 2.780, 100 => 2.624, 150 => 2.524, 200 => 2.449),
24 => array(10 => 3.112, 50 => 2.802, 100 => 2.644, 150 => 2.543, 200 => 2.468),
25 => array(10 => 3.135, 50 => 2.822, 100 => 2.663, 150 => 2.562, 200 => 2.486),
26 => array(10 => 3.158, 50 => 2.841, 100 => 2.681, 150 => 2.579, 200 => 2.503),
27 => array(10 => 3.179, 50 => 2.859, 100 => 2.698, 150 => 2.596, 200 => 2.520),
28 => array(10 => 3.199, 50 => 2.876, 100 => 2.714, 150 => 2.612, 200 => 2.536),
29 => array(10 => 3.218, 50 => 2.893, 100 => 2.730, 150 => 2.627, 200 => 2.551),
30 => array(10 => 3.236, 50 => 2.908, 100 => 2.745, 150 => 2.642, 200 => 2.565),
40 => array(10 => 3.381, 50 => 3.036, 100 => 2.868, 150 => 2.762, 200 => 2.684),
50 => array(10 => 3.482, 50 => 3.128, 100 => 2.957, 150 => 2.851, 200 => 2.772),
60 => array(10 => 3.560, 50 => 3.200, 100 => 3.027, 150 => 2.920, 200 => 2.841),
70 => array(10 => 3.622, 50 => 3.258, 100 => 3.084, 150 => 2.977, 200 => 2.898),
80 => array(10 => 3.673, 50 => 3.306, 100 => 3.132, 150 => 3.025, 200 => 2.946),
90 => array(10 => 3.716, 50 => 3.348, 100 => 3.173, 150 => 3.066, 200 => 2.987),
100 => array(10 => 3.754, 50 => 3.384, 100 => 3.210, 150 => 3.102, 200 => 3.024),
200 => array(10 => 3.978, 50 => 3.606, 100 => 3.432, 150 => 3.327, 200 => 3.250),
300 => array(10 => 4.094, 50 => 3.724, 100 => 3.552, 150 => 3.449, 200 => 3.373),
400 => array(10 => 4.171, 50 => 3.803, 100 => 3.634, 150 => 3.531, 200 => 3.457),
500 => array(10 => 4.228, 50 => 3.863, 100 => 3.695, 150 => 3.593, 200 => 3.520),
600 => array(10 => 4.274, 50 => 3.911, 100 => 3.744, 150 => 3.643, 200 => 3.570),
700 => array(10 => 4.312, 50 => 3.951, 100 => 3.785, 150 => 3.685, 200 => 3.612),
800 => array(10 => 4.344, 50 => 3.984, 100 => 3.820, 150 => 3.720, 200 => 3.648),
900 => array(10 => 4.372, 50 => 4.014, 100 => 3.850, 150 => 3.751, 200 => 3.679),
1000 => array(10 => 4.397, 50 => 4.040, 100 => 3.877, 150 => 3.778, 200 => 3.707),
PHP_INT_MAX => array(10 => 5.842, 50 => 5.842, 100 => 5.841, 150 => 5.840, 200 => 5.839)
  ); 
}
?>