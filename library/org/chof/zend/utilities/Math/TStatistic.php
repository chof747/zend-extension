<?php
class Chof_Util_Math_TStatistic 
{
  public static function extractOutlier(array $sample, $confidence = 0.05)
  //****************************************************************************
  {
    $outliers = array();    
    $side = 0;
    
    asort($sample);
    $keys = array_keys($sample);
    
    do
    {
      $newoutlier = true;
      while ($newoutlier)
      {
        $avg = Chof_Util_Math::average($sample);
        $sigma = Chof_Util_Math::standardDev($sample);

        $key = array_pop($keys); 
        $probe = array_pop($sample);
        
        
        $G = abs($probe - $avg) / $sigma;
        $newoutlier = ($G > self::gcrit(count($sample), $confidence)); 
        
        if ($newoutlier)
        {
          $outliers[$key] = $probe;
        }
        else
        {
          $sample[$key] =  $probe;
        }
      }
      
      arsort($sample);
      $keys = array_keys($sample);
      
    } while ($side++ <= 1);
    
    return array($sample, $outliers);
  }
  
  
  public static function ttestEqual(array $sample, $exp, $confidence)
  //****************************************************************************
  {
    return abs(self::tValue($exp, $sample)) < 
           self::t((1-$confidence), count($sample) -1);
  }
  
  public static function ttestLarger(array $sample, $exp, $confidence)
  //****************************************************************************
  {
    return self::tValue($exp, $sample) > 
           self::t((1-$confidence), count($sample) -1, true);
  }
  
  public static function ttestSmaller(array $sample, $exp, $confidence)
  //****************************************************************************
  {
    return self::tValue($exp, $sample) < 
           -1 * self::t((1-$confidence), count($sample) -1, true);
  }
  
  public static function tValue($reference, array $sample)
  #*****************************************************************************
  {
    $n = count($sample)*1.0;
    $avg = Chof_Util_Math::average($sample);
    $sigma = Chof_Util_Math::standardDev($sample, true);
    
    $t = sqrt($n) * ($avg - $reference) / $sigma;
  
    return $t;
  }
  
  public static function gcrit($df, $confidence = 0.05, $oneside = false)
  //****************************************************************************
  {
    if ($oneside)
    {
      $confidence = 1 - (1 - $confidence) * 2; 
    }
    
    $confidence = intval($confidence * 1000);
    
    $cix = self::arrayIntervalSearch($confidence, 
        self::$G_CONFIDENCE_POINTS);
    $dix = self::arrayIntervalSearch($df, self::$T_DF_POINTS);
    
    if ((is_numeric($cix)) && (is_numeric($dix)))
    {
      return self::$G_GCRIT[$dix][$cix];
    }
    else if ((is_numeric($cix)) && (is_array($dix)))
    {
      return self::interpolDf($df, $dix, 
          self::$G_GCRIT[$dix[0]][$cix], 
          self::$G_GCRIT[$dix[1]][$cix]);
    }
    else if ((is_array($cix)) && (is_numeric($dix)))
    {
      return self::interpolG($confidence, $dix, $cix);
    }
    else
    {
      return self::interpolDf($df, $dix, 
          self::interpolG($confidence, $dix[0], $cix),
          self::interpolG($confidence, $dix[1], $cix));
    }
  }
  
  public static function t($probability, $df, $oneside = false)
  //****************************************************************************
  {
    if ($oneside)
    {
      $probability = 1 - (1 - $probability) * 2; 
    }
    
    $probability = intval($probability * 1000);
    
    $pix = self::arrayIntervalSearch($probability, 
        self::$T_PROBABILTY_POINTS);
    $dix = self::arrayIntervalSearch($df, self::$T_DF_POINTS);
    
    if ((is_numeric($pix)) && (is_numeric($dix)))
    {
      return self::$T_DISTRIBUTION[$dix][$pix];
    }
    else if ((is_numeric($pix)) && (is_array($dix)))
    {
      return self::interpolDf($df, $dix, 
          self::$T_DISTRIBUTION[$dix[0]][$pix], 
          self::$T_DISTRIBUTION[$dix[1]][$pix]);
    }
    else if ((is_array($pix)) && (is_numeric($dix)))
    {
      return self::interpolP($probability, $dix, $pix);
    }
    else
    {
      return self::interpolDf($df, $dix, 
          self::interpolP($probability, $dix[0], $pix),
          self::interpolP($probability, $dix[1], $pix));
    }
  }
  
  private static function arrayIntervalSearch($ix, array $a)
  //****************************************************************************
  {
    if (array_search($ix, $a))
    {
      return $ix;
    }
    else 
    {
      for($i=0;$i<count($a);$i++)
      {
        if ($a[$i] > $ix)
        {
          if ($i > 0)
          {
            return array(
                $a[$i-1], 
                $a[$i]
            );
          }
          else 
          {
            throw new Zend_Exception(
                "$ix is lower than the supported range of the array.");
          }
        }
      }
      
      throw new Zend_Exception(
          "$ix is above the supported range for the array");
    }    
  }
 
  private static function interpolDf($df, $dix, $t0, $t1)
  //****************************************************************************
  {
    return Chof_Util_Math::linInterpolation($df, 
      $dix[0], $dix[1],
      $t0, $t1);
  }
  
  private static function interpolP($probability, $df, $pix)
  //****************************************************************************
  {
    if ($probability >= 950)
    {
      return Chof_Util_Math::logInterpolation($probability,
        $pix[0], $pix[1],
        self::$T_DISTRIBUTION[$df][$pix[0]], self::$T_DISTRIBUTION[$df][$pix[1]]);
    }
    else 
    {
      return Chof_Util_Math::linInterpolation($probability,
        $pix[0], $pix[1],
        self::$T_DISTRIBUTION[$df][$pix[0]], self::$T_DISTRIBUTION[$df][$pix[1]]);
    }
  }
    
  private static function interpolG($confidence, $df, $cix)
  //****************************************************************************
  {
    if ($confidence >= 50)
    {
      return Chof_Util_Math::logInterpolation($confidence,
        $cix[0], $cix[1],
        self::$G_GCRIT[$df][$cix[0]], self::$G_GCRIT[$df][$cix[1]]);
    }
    else 
    {
      return Chof_Util_Math::linInterpolation($confidence,
        $cix[0], $cix[1],
        self::$G_GCRIT[$df][$cix[0]], self::$G_GCRIT[$df][$cix[1]]);
    }
  }
    
  private static $T_PROBABILTY_POINTS = array(
    500, 750, 800, 900, 950, 980, 990, 998  
  );
  
  private static $T_DF_POINTS = array(
        1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,
       16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30, 
       40,  50,  60,  70,  80,  90, 100, 200, 300, 400, 500, PHP_INT_MAX
  ); 
  
  private static $T_DISTRIBUTION = array(
    1 => array(  500 => 1.000, 750 => 2.414, 800 => 3.078, 900 => 6.314, 950 => 12.706, 980 => 31.821, 990 => 63.657, 998 => 318.309, ),
    2 => array(  500 => 0.816, 750 => 1.604, 800 => 1.886, 900 => 2.920, 950 => 4.303, 980 => 6.965, 990 => 9.925, 998 => 22.327, ),
    3 => array(  500 => 0.765, 750 => 1.423, 800 => 1.638, 900 => 2.353, 950 => 3.182, 980 => 4.541, 990 => 5.841, 998 => 10.215, ),
    4 => array(  500 => 0.741, 750 => 1.344, 800 => 1.533, 900 => 2.132, 950 => 2.776, 980 => 3.747, 990 => 4.604, 998 => 7.173, ),
    5 => array(  500 => 0.727, 750 => 1.301, 800 => 1.476, 900 => 2.015, 950 => 2.571, 980 => 3.365, 990 => 4.032, 998 => 5.893, ),
    6 => array(  500 => 0.718, 750 => 1.273, 800 => 1.440, 900 => 1.943, 950 => 2.447, 980 => 3.143, 990 => 3.707, 998 => 5.208, ),
    7 => array(  500 => 0.711, 750 => 1.254, 800 => 1.415, 900 => 1.895, 950 => 2.365, 980 => 2.998, 990 => 3.499, 998 => 4.785, ),
    8 => array(  500 => 0.706, 750 => 1.240, 800 => 1.397, 900 => 1.860, 950 => 2.306, 980 => 2.896, 990 => 3.355, 998 => 4.501, ),
    9 => array(  500 => 0.703, 750 => 1.230, 800 => 1.383, 900 => 1.833, 950 => 2.262, 980 => 2.821, 990 => 3.250, 998 => 4.297, ),
    10 => array(  500 => 0.700, 750 => 1.221, 800 => 1.372, 900 => 1.812, 950 => 2.228, 980 => 2.764, 990 => 3.169, 998 => 4.144, ),
    11 => array(  500 => 0.697, 750 => 1.214, 800 => 1.363, 900 => 1.796, 950 => 2.201, 980 => 2.718, 990 => 3.106, 998 => 4.025, ),
    12 => array(  500 => 0.695, 750 => 1.209, 800 => 1.356, 900 => 1.782, 950 => 2.179, 980 => 2.681, 990 => 3.055, 998 => 3.930, ),
    13 => array(  500 => 0.694, 750 => 1.204, 800 => 1.350, 900 => 1.771, 950 => 2.160, 980 => 2.650, 990 => 3.012, 998 => 3.852, ),
    14 => array(  500 => 0.692, 750 => 1.200, 800 => 1.345, 900 => 1.761, 950 => 2.145, 980 => 2.624, 990 => 2.977, 998 => 3.787, ),
    15 => array(  500 => 0.691, 750 => 1.197, 800 => 1.341, 900 => 1.753, 950 => 2.131, 980 => 2.602, 990 => 2.947, 998 => 3.733, ),
    16 => array(  500 => 0.690, 750 => 1.194, 800 => 1.337, 900 => 1.746, 950 => 2.120, 980 => 2.583, 990 => 2.921, 998 => 3.686, ),
    17 => array(  500 => 0.689, 750 => 1.191, 800 => 1.333, 900 => 1.740, 950 => 2.110, 980 => 2.567, 990 => 2.898, 998 => 3.646, ),
    18 => array(  500 => 0.688, 750 => 1.189, 800 => 1.330, 900 => 1.734, 950 => 2.101, 980 => 2.552, 990 => 2.878, 998 => 3.610, ),
    19 => array(  500 => 0.688, 750 => 1.187, 800 => 1.328, 900 => 1.729, 950 => 2.093, 980 => 2.539, 990 => 2.861, 998 => 3.579, ),
    20 => array(  500 => 0.687, 750 => 1.185, 800 => 1.325, 900 => 1.725, 950 => 2.086, 980 => 2.528, 990 => 2.845, 998 => 3.552, ),
    21 => array(  500 => 0.686, 750 => 1.183, 800 => 1.323, 900 => 1.721, 950 => 2.080, 980 => 2.518, 990 => 2.831, 998 => 3.527, ),
    22 => array(  500 => 0.686, 750 => 1.182, 800 => 1.321, 900 => 1.717, 950 => 2.074, 980 => 2.508, 990 => 2.819, 998 => 3.505, ),
    23 => array(  500 => 0.685, 750 => 1.180, 800 => 1.319, 900 => 1.714, 950 => 2.069, 980 => 2.500, 990 => 2.807, 998 => 3.485, ),
    24 => array(  500 => 0.685, 750 => 1.179, 800 => 1.318, 900 => 1.711, 950 => 2.064, 980 => 2.492, 990 => 2.797, 998 => 3.467, ),
    25 => array(  500 => 0.684, 750 => 1.178, 800 => 1.316, 900 => 1.708, 950 => 2.060, 980 => 2.485, 990 => 2.787, 998 => 3.450, ),
    26 => array(  500 => 0.684, 750 => 1.177, 800 => 1.315, 900 => 1.706, 950 => 2.056, 980 => 2.479, 990 => 2.779, 998 => 3.435, ),
    27 => array(  500 => 0.684, 750 => 1.176, 800 => 1.314, 900 => 1.703, 950 => 2.052, 980 => 2.473, 990 => 2.771, 998 => 3.421, ),
    28 => array(  500 => 0.683, 750 => 1.175, 800 => 1.313, 900 => 1.701, 950 => 2.048, 980 => 2.467, 990 => 2.763, 998 => 3.408, ),
    29 => array(  500 => 0.683, 750 => 1.174, 800 => 1.311, 900 => 1.699, 950 => 2.045, 980 => 2.462, 990 => 2.756, 998 => 3.396, ),
    30 => array(  500 => 0.683, 750 => 1.173, 800 => 1.310, 900 => 1.697, 950 => 2.042, 980 => 2.457, 990 => 2.750, 998 => 3.385, ),
    40 => array(  500 => 0.681, 750 => 1.167, 800 => 1.303, 900 => 1.684, 950 => 2.021, 980 => 2.423, 990 => 2.704, 998 => 3.307, ),
    50 => array(  500 => 0.679, 750 => 1.164, 800 => 1.299, 900 => 1.676, 950 => 2.009, 980 => 2.403, 990 => 2.678, 998 => 3.261, ),
    60 => array(  500 => 0.679, 750 => 1.162, 800 => 1.296, 900 => 1.671, 950 => 2.000, 980 => 2.390, 990 => 2.660, 998 => 3.232, ),
    70 => array(  500 => 0.678, 750 => 1.160, 800 => 1.294, 900 => 1.667, 950 => 1.994, 980 => 2.381, 990 => 2.648, 998 => 3.211, ),
    80 => array(  500 => 0.678, 750 => 1.159, 800 => 1.292, 900 => 1.664, 950 => 1.990, 980 => 2.374, 990 => 2.639, 998 => 3.195, ),
    90 => array(  500 => 0.677, 750 => 1.158, 800 => 1.291, 900 => 1.662, 950 => 1.987, 980 => 2.368, 990 => 2.632, 998 => 3.183, ),
    100 => array(  500 => 0.677, 750 => 1.157, 800 => 1.290, 900 => 1.660, 950 => 1.984, 980 => 2.364, 990 => 2.626, 998 => 3.174, ),
    200 => array(  500 => 0.676, 750 => 1.154, 800 => 1.286, 900 => 1.653, 950 => 1.972, 980 => 2.345, 990 => 2.601, 998 => 3.131, ),
    300 => array(  500 => 0.675, 750 => 1.153, 800 => 1.284, 900 => 1.650, 950 => 1.968, 980 => 2.339, 990 => 2.592, 998 => 3.118, ),
    400 => array(  500 => 0.675, 750 => 1.152, 800 => 1.284, 900 => 1.649, 950 => 1.966, 980 => 2.336, 990 => 2.588, 998 => 3.111, ),
    500 => array(  500 => 0.675, 750 => 1.152, 800 => 1.283, 900 => 1.648, 950 => 1.965, 980 => 2.334, 990 => 2.586, 998 => 3.107, ),
    PHP_INT_MAX => array(  500 => 0.674, 750 => 1.150, 800 => 1.282, 900 => 1.645, 950 => 1.960, 980 => 2.326, 990 => 2.576, 998 => 3.090, )
  );
  
  private static $G_CONFIDENCE_POINTS = array(
      10, 50, 100, 150, 200
  );
  
  private static $G_GCRIT = array(
       3 => array(10 => 1.003, 50 => 1.015, 100 => 1.029, 150 => 1.042, 200 => 1.055),
       4 => array(10 => 1.129, 50 => 1.144, 100 => 1.163, 150 => 1.181, 200 => 1.200),
       5 => array(10 => 1.233, 50 => 1.249, 100 => 1.268, 150 => 1.288, 200 => 1.309),
       6 => array(10 => 1.320, 50 => 1.336, 100 => 1.356, 150 => 1.377, 200 => 1.398),
       7 => array(10 => 1.395, 50 => 1.411, 100 => 1.431, 150 => 1.452, 200 => 1.473),
       8 => array(10 => 1.460, 50 => 1.476, 100 => 1.496, 150 => 1.517, 200 => 1.538),
       9 => array(10 => 1.517, 50 => 1.532, 100 => 1.553, 150 => 1.573, 200 => 1.595),
      10 => array(10 => 1.567, 50 => 1.583, 100 => 1.603, 150 => 1.624, 200 => 1.645),
      11 => array(10 => 1.613, 50 => 1.628, 100 => 1.648, 150 => 1.669, 200 => 1.691),
      12 => array(10 => 1.654, 50 => 1.669, 100 => 1.689, 150 => 1.710, 200 => 1.732),
      13 => array(10 => 1.692, 50 => 1.707, 100 => 1.727, 150 => 1.748, 200 => 1.769),
      14 => array(10 => 1.726, 50 => 1.742, 100 => 1.761, 150 => 1.782, 200 => 1.804),
      15 => array(10 => 1.758, 50 => 1.773, 100 => 1.793, 150 => 1.814, 200 => 1.835),
      16 => array(10 => 1.788, 50 => 1.803, 100 => 1.823, 150 => 1.843, 200 => 1.865),
      17 => array(10 => 1.816, 50 => 1.831, 100 => 1.850, 150 => 1.871, 200 => 1.892),
      18 => array(10 => 1.842, 50 => 1.857, 100 => 1.876, 150 => 1.897, 200 => 1.918),
      19 => array(10 => 1.866, 50 => 1.881, 100 => 1.901, 150 => 1.921, 200 => 1.942),
      20 => array(10 => 1.889, 50 => 1.904, 100 => 1.924, 150 => 1.944, 200 => 1.965),
      21 => array(10 => 1.911, 50 => 1.926, 100 => 1.945, 150 => 1.966, 200 => 1.987),
      22 => array(10 => 1.931, 50 => 1.946, 100 => 1.966, 150 => 1.986, 200 => 2.007),
      23 => array(10 => 1.951, 50 => 1.966, 100 => 1.985, 150 => 2.006, 200 => 2.027),
      24 => array(10 => 1.970, 50 => 1.985, 100 => 2.004, 150 => 2.024, 200 => 2.045),
      25 => array(10 => 1.988, 50 => 2.003, 100 => 2.022, 150 => 2.042, 200 => 2.063),
      26 => array(10 => 2.005, 50 => 2.020, 100 => 2.039, 150 => 2.059, 200 => 2.080),
      27 => array(10 => 2.021, 50 => 2.036, 100 => 2.055, 150 => 2.075, 200 => 2.096),
      28 => array(10 => 2.037, 50 => 2.052, 100 => 2.071, 150 => 2.091, 200 => 2.112),
      29 => array(10 => 2.052, 50 => 2.067, 100 => 2.086, 150 => 2.106, 200 => 2.127),
      30 => array(10 => 2.066, 50 => 2.081, 100 => 2.100, 150 => 2.120, 200 => 2.141),
      40 => array(10 => 2.187, 50 => 2.201, 100 => 2.220, 150 => 2.240, 200 => 2.260),
      50 => array(10 => 2.277, 50 => 2.291, 100 => 2.310, 150 => 2.329, 200 => 2.350),
      60 => array(10 => 2.349, 50 => 2.363, 100 => 2.382, 150 => 2.401, 200 => 2.421),
      70 => array(10 => 2.409, 50 => 2.423, 100 => 2.441, 150 => 2.460, 200 => 2.480),
      80 => array(10 => 2.460, 50 => 2.473, 100 => 2.491, 150 => 2.510, 200 => 2.530),
      90 => array(10 => 2.504, 50 => 2.517, 100 => 2.535, 150 => 2.554, 200 => 2.573),
     100 => array(10 => 2.542, 50 => 2.556, 100 => 2.574, 150 => 2.592, 200 => 2.612),
     200 => array(10 => 2.786, 50 => 2.799, 100 => 2.816, 150 => 2.833, 200 => 2.852),
     300 => array(10 => 2.920, 50 => 2.932, 100 => 2.948, 150 => 2.966, 200 => 2.984),
     400 => array(10 => 3.011, 50 => 3.023, 100 => 3.039, 150 => 3.056, 200 => 3.074),
     500 => array(10 => 3.080, 50 => 3.092, 100 => 3.108, 150 => 3.124, 200 => 3.142),
     600 => array(10 => 3.135, 50 => 3.147, 100 => 3.163, 150 => 3.179, 200 => 3.196),
     700 => array(10 => 3.181, 50 => 3.193, 100 => 3.208, 150 => 3.225, 200 => 3.242),
     800 => array(10 => 3.221, 50 => 3.232, 100 => 3.247, 150 => 3.263, 200 => 3.280),
     900 => array(10 => 3.255, 50 => 3.266, 100 => 3.282, 150 => 3.297, 200 => 3.314),
    1000 => array(10 => 3.285, 50 => 3.297, 100 => 3.312, 150 => 3.328, 200 => 3.344),
    PHP_INT_MAX 
         => array(10 => 5.825, 50 => 5.826, 100 => 5.827, 150 => 5.828, 200 => 5.828),
  ); 
}
?>